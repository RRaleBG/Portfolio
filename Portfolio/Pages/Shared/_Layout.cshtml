<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
@{
        var nonce = Convert.ToBase64String(Guid.NewGuid().ToByteArray());
        ViewData["CSPNonce"] = nonce;
}
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Rados_Ai_Portfolio</title>
    <meta name="theme-color" content="#0b0b0f" />

    <script nonce="@ViewData["CSPNonce"]">
        document.documentElement.classList.add('js');
    </script>
    <script nonce="@ViewData["CSPNonce"]">
        (function () {
            const key = 'theme-preference';
            const html = document.documentElement;
            const prefersDark = () => window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            let t = null;
            try { t = localStorage.getItem(key); } catch { }
            if (!t) { t = prefersDark() ? 'dark' : 'light'; }
            html.setAttribute('data-bs-theme', t);
            html.setAttribute('data-theme', t);
        })();
    </script>

    <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/css/site.bundle.css" asp-append-version="true" />
    <link rel="preload" href="/css/site.bundle.css" as="style">
    <link rel="preload" href="/js/site.bundle.js" as="script">
</head>


<body id="mainToast"
    data-toast-message="@((TempData["ToastMessage"]?.ToString() ?? string.Empty).Replace("\"", "&quot;"))"
    data-toast-type="@((TempData["ToastType"]?.ToString() ?? "info"))">

    <div class="bg-ornaments" aria-hidden="true"></div>
    <div id="progressbar" class="progress fixed-top rounded-0 shadow-sm glass"
        style="height:3px; z-index:1090; opacity:0; transition:opacity .2s ease">
        <div class="progress-bar bg-primary" role="progressbar" style="width:0%"></div>
    </div>
    <header>
        <nav class="navbar navbar-expand-md navbar-dark glass-nav mb-4">
            <div class="container-xxl">
                <a class="navbar-brand brand-gradient fw-bold" asp-area="" asp-page="/Index">Rados Portfolio</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain"
                    aria-controls="navbarMain" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarMain">
                    <ul class="navbar-nav ms-auto mb-2 mb-md-0">
                        <li class="nav-item"><a class="nav-link" asp-page="/Projects">Projects</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Blog">Blogs</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Cv">CV</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Chat">Chat</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Contact">Contact</a></li>
                        @if (User?.Identity?.IsAuthenticated == true)
                        {
                            <li class="nav-item"><a class="nav-link" asp-page="/Dashboard/Index">Dashboard</a></li>
                            @if (User.IsInRole("Admin"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Admin/Projects/Index">Manage Projects</a>
                                </li>
                                <li class="nav-item"><a class="nav-link" asp-page="/Admin/Blog/Index">Manage Blog</a></li>
                            }
                        }
                        else
                        {
                            <li class="nav-item"><a class="nav-link" asp-page="/Admin/Login">Login</a></li>
                            @* <li class="nav-item"><a class="nav-link" asp-page="/Admin/Register">Register</a></li> *@
                        }
                    </ul>
                    <div class="d-flex align-items-center gap-2">
                        @if (User?.Identity?.IsAuthenticated == true)
                        {
                            @* <span class="navbar-text small">@User.Identity!.Name</span> *@
                            <form asp-page="/Admin/Logout" method="post" class="d-inline">
                                <button type="submit" class="btn btn-outline-warning btn-sm">Logout</button>
                            </form>
                        }
                        <button id="theme-toggle" class="btn btn-outline-secondary btn-sm" type="button"
                            title="Toggle dark/light">🌙</button>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <div class="container-xxl">
        <main role="main" class="pb-4 reveal-inside">
            @RenderBody()
        </main>
    </div>
    <button id="backToTop" type="button" class="btn btn-primary position-fixed"
        style="bottom:20px; right:20px; display:none; z-index:1080" aria-label="Back to top">
        ↑
    </button>

    <!-- scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <!-- core site scripts -->
    <script src="~/js/site.bundle.js" asp-append-version="true" defer></script>
    <script src="/js/site.js" asp-append-version="true"></script>

    <script src="/js/signalR.js" asp-append-version="true"></script>
    <script src="/js/voicechat.js" asp-append-version="true"></script>
    <script src="/js/notifications.js" asp-append-version="true"></script>
    <script>
        // Only handle user toggling; initial theme already set in head
        (function () {
            const key = 'theme-preference';
            const html = document.documentElement;
            const btn = document.getElementById('theme-toggle');
            function current() { return html.getAttribute('data-bs-theme') || 'light'; }
            function set(t) { html.setAttribute('data-bs-theme', t); html.setAttribute('data-theme', t); try { localStorage.setItem(key, t); } catch { } }
            function icon() { if (btn) btn.textContent = current() === 'dark' ? '☀️' : '🌙'; }
            icon();
            if (btn) { btn.addEventListener('click', function () { set(current() === 'light' ? 'dark' : 'light'); icon(); }); }
        })();
    </script>
    <script>
        // Page-load reveal animations (staggered)
        (function () {
            function revealOnLoad() {
                const ordered = [];

                // const nav = document.querySelector('header .navbar');
                // if (nav) ordered.push(nav);

                const mainChildren = Array.from(document.querySelectorAll('main > *:not(script):not(style)'));
                if (mainChildren.length) ordered.push(...mainChildren);

                const extras = Array.from(document.querySelectorAll('main .card, main .list-group, main .table'));
                extras.forEach(el => { if (!ordered.includes(el)) ordered.push(el); });

                if (ordered.length === 0) {
                    const main = document.querySelector('main');
                    if (main) ordered.push(main);
                }

                ordered.forEach(el => el.classList.add('reveal'));
                ordered.forEach((el, i) => {
                    const delay = Math.min(80 * i, 700); // cap delay
                    setTimeout(() => el.classList.add('visible'), delay);
                });

                // Reveal main content with scale-in
                var mainReveal = document.querySelector('main.reveal-inside');
                if (mainReveal) {
                    mainReveal.classList.add('reveal-inside');
                    setTimeout(function () {
                        mainReveal.classList.add('visible');
                    }, 120);
                }
            }

            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', revealOnLoad);
            } else {
                revealOnLoad();
            }
        })();
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>